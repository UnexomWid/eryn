#ifndef DEF_OSH_DXX_GUARD
#define DEF_OSH_DXX_GUARD

#define OSH_PLAINTEXT_MARKER                         reinterpret_cast<uint8_t*>("p")
#define OSH_TEMPLATE_MARKER                          reinterpret_cast<uint8_t*>("t")
#define OSH_TEMPLATE_CONDITIONAL_START_MARKER        reinterpret_cast<uint8_t*>("?")
#define OSH_TEMPLATE_CONDITIONAL_END_MARKER          reinterpret_cast<uint8_t*>("!")
#define OSH_TEMPLATE_LOOP_START_MARKER               reinterpret_cast<uint8_t*>("@")
#define OSH_TEMPLATE_LOOP_END_MARKER                 reinterpret_cast<uint8_t*>("#")
#define OSH_TEMPLATE_COMPONENT_MARKER                reinterpret_cast<uint8_t*>("%")
#define OSH_TEMPLATE_COMPONENT_END_MARKER            reinterpret_cast<uint8_t*>("/")

#define OSH_PLAINTEXT_MARKER_LENGTH                  1u
#define OSH_TEMPLATE_MARKER_LENGTH                   1u
#define OSH_TEMPLATE_CONDITIONAL_START_MARKER_LENGTH 1u
#define OSH_TEMPLATE_CONDITIONAL_END_MARKER_LENGTH   1u
#define OSH_TEMPLATE_LOOP_START_MARKER_LENGTH        1u
#define OSH_TEMPLATE_LOOP_END_MARKER_LENGTH          1u
#define OSH_TEMPLATE_COMPONENT_MARKER_LENGTH         1u
#define OSH_TEMPLATE_COMPONENT_END_MARKER_LENGTH     1u

#define OSH_FORMAT 32u / 8u

#include <cstdint>

struct OSHData {
    const uint8_t* data;
    const size_t   size;

    OSHData(const uint8_t* d, const size_t s) : data(d), size(s) { }
};

#endif